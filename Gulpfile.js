// Generated by CoffeeScript 1.10.0
var app, assets, connectlr, dest, es, express, gp, gulp, lr_port, pak, path, paths, port, server, src, styles, tinylr;

gulp = require('gulp');
gp = require('gulp-load-plugins')();
tinylr = require('tiny-lr');
express = require('express');
path = require('path');
es = require('event-stream');
pak = require('./package.json');
connectlr = require('connect-livereload');
app = express();
server = tinylr();
port = 8000;
lr_port = 35729;
dest = 'dist/';
src = 'src/';
assets = 'assets/';

paths = {
  vendor_styl: 'bower_components/bootstrap-stylus/stylus/',
  vendor_js: ['bower_components/jquery/dist/jquery.js', 'bower_components/bootstrap/dist/js/bootstrap.js'],
  vendor_fonts: 'bower_components/bootstrap/dist/fonts/*',
  src_stylesheets: src + assets + 'stylesheets/*.styl',
  src_scripts: src + assets + 'scripts/',
  src_coffee: this.src_scripts + '*.coffee',
  src_js: this.src_scripts + '*.js',
  src_templates: src + '*.jade',
  src_pdf: src + '*.pdf',
  dest_stylesheets: dest + assets + 'stylesheets',
  dest_scripts: dest + assets + 'scripts',
  dest_fonts: dest + assets + 'fonts'
};

styles = function() {
  return gulp.src(paths.src_stylesheets).pipe(gp.plumber()).pipe(gp.stylus({
    include: paths.vendor_styl
  })).pipe(gp.autoprefixer("> 1%")).pipe(gp.concat(pak.name + '.css'));
};

gulp.task('copy-fonts', function() {
  return gulp.src(paths.vendor_fonts).pipe(gulp.dest(paths.dest_fonts));
});

gulp.task('css', ['copy-fonts'], function() {
  gp.util.log('Performing css task');
  return styles().pipe(gulp.dest(paths.dest_stylesheets)).pipe(gp.livereload(server));
});

gulp.task('js', function() {
  gp.util.log('Performing js task');
  return es.merge(gulp.src(paths.vendor_js), gulp.src(paths.src_coffee), gulp.src(paths.src_js)).pipe(gp.concat(pak.name + '.min.js')).pipe(gulp.dest(paths.dest_scripts)).pipe(gp.livereload(server));
});

gulp.task('templates', function() {
  gp.util.log('Performing templates task');
  return gulp.src(paths.src_templates).pipe(gp.plumber()).pipe(gp.jade({
    pretty: true
  })).pipe(gulp.dest(dest)).pipe(gp.livereload(server));
});

gulp.task('express', function() {
  app.use(connectlr({
    port: lr_port
  }));
  app.use(express["static"](path.resolve(dest)));
  app.listen(port);
  gp.util.log('Listening on port: ' + port);
});

gulp.task('copy-pdf', function() {
  return gulp.src(paths.src_pdf).pipe(gulp.dest(dest));
});

gulp.task('watch', function() {
  return server.listen(lr_port, function(err) {
    if (err) {
      return console.log(err);
    } else {
      gulp.watch(paths.src_stylesheets, ['css-production']);
      gulp.watch(paths.src_js, ['js']);
      gulp.watch(paths.src_coffee, ['js']);
      gulp.watch(paths.src_templates, ['templates']);
      gulp.watch(paths.src_pdf, ['copy-pdf']);
    }
  });
});

gulp.task('default', ['js', 'css-production', 'copy-pdf', 'templates', 'express', 'watch']);

gulp.task('css-production', ['templates-production'], function() {
  return styles().pipe(gp.uncss({
    html: [dest + 'index.html']
  })).pipe(gp.csso()).pipe(gp.rename({
    suffix: '.min'
  })).pipe(gulp.dest(paths.dest_stylesheets));
});

gulp.task('templates-production', function() {
  gp.util.log('Performing templates task');
  return gulp.src(paths.src_templates).pipe(gp.plumber()).pipe(gp.jade()).pipe(gulp.dest(dest));
});

gulp.task('production', ['css-production', 'templates-production', 'copy-pdf']);

gulp.task('clean', function() {
  return gulp.src(dest, {
    read: false
  }).pipe(gp.rimraf());
});
